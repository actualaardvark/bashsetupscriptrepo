#!/bin/bash

source values.conf

updatecheck(){
	# Downloads the latest version of the script from github
	curl https://raw.githubusercontent.com/actualaardvark/bashsetupscriptrepo/main/updateandrun > updateandrun
	# Compares the currently installed version with the new version
	oldupdater=$(shasum -a 256 /volumes/"$usbdevicename"/updateandrun)
	newupdater=$(shasum -a 256 updateandrun)
	oldupdaterhash=${oldupdater%% *}
	newupdaterhash=${newupdater%% *}
	# Replaces the old version with the new if the old copy is out of date
	if [ "$oldupdaterhash" != "$newupdaterhash" ]; then
		echo "Updater out of date"
		cat updateandrun > /volumes/"$usbdevicename"/updateandrun
		chmod +x /volumes/"$usbdevicename"/updateandrun
		rm updateandrun
		sh /volumes/"$usbdevicename"/updateandrun
		exit 1
	else
		echo "Updater is on the latest version"
	fi
}
checklistrender () {
	# Loop through checklist items and display them with checkboxes
    clear
    for ((i=0; i<${#checklist[@]}; i++)); do
        if [[ ${checklist_status[$i]} -eq 1 ]]; then
            checkbox="[x]"
        else
            checkbox="[ ]"
        fi
        echo "$checkbox ${checklist[$i]}"
    done
}
usercheck () {
	if [ $(whoami) != "$requireduser" ]; then
		echo "Login as $requireduser to run this script"
		exit 1
	fi
}
userlevelcheck(){
	if [[ "$userlevel" == "NUS" ]]; then
		echo "Promoting User to Admin"
		echo "$adminpassword" | sudo -S -k dscl . -merge /Groups/admin GroupMembership $(id -un 502)
	fi
	if [[ "$userlevel" == "NMS" || "$userlevel" == "NLS" ]]; then
		echo "Demoting User to Standard"
		echo "$adminpassword" | sudo -S -k dseditgroup -o edit -d $(id -un 502) -t user admin
	fi
}

adminpassword=$(cat /volumes/"$usbdevicename"/password.txt)

# Gets the users full name. Taken from Naming_Convention.sh
full_name=$(dscl . -read /Users/$(id -un 502) RealName | awk -F': ' '{print $2}')
# The first 3 letters of the user account's full name
userlevel=${full_name:0:3}
# Define checklist items
checklist=("Installer Update Check" "Username Check" "Obtain Admin Permissions" "Network Name"  "Bonjour Name" "Device Name" "Script Wrap-Up")
# Sets the checked items
checklist_status=(0 0 0 0 0 0 0)
# Defines the user needed for the script to execute
requireduser="_applecore"

# Checks for updates
updatecheck
clear
checklist_status=(1 0 0 0 0 0 0)
checklistrender

# Checks username
usercheck
clear
checklist_status=(1 1 0 0 0 0 0)
checklistrender

# Obtains admin permission from user
if [ $autopassword == "true" ]; then
	echo "$adminpassword" | sudo -S -k echo ""
else
	sudo echo ""
fi
clear
checklist_status=(1 1 1 0 0 0 0)
checklistrender

# Set HostName, ComputerName, and LocalHostName to the full name
if [ $autopassword == "true" ]; then
	echo "$adminpassword" | sudo -S -k scutil --set HostName "$full_name"
else
	sudo scutil --set HostName "$full_name"
fi
clear
checklist_status=(1 1 1 1 0 0 0)
checklistrender

if [ $autopassword == "true" ]; then
	echo "$adminpassword" | sudo -S -k scutil --set LocalHostName "$full_name"
else
	sudo scutil --set LocalHostName "$full_name"
fi
clear
checklist_status=(1 1 1 1 1 0 0)
checklistrender

if [ $autopassword == "true" ]; then
	echo "$adminpassword" | sudo -S -k scutil --set ComputerName "$full_name"
else
	sudo scutil --set ComputerName "$full_name"
fi
clear
checklist_status=(1 1 1 1 1 1 0)
checklistrender

# Renew user enrollment. Taken from user_enrollment.sh
if [ $autopassword == "true" ]; then
	echo "$adminpassword" | sudo -S -k profiles renew -type enrollment
else
	sudo profiles renew -type enrollment
fi
clear
checklist_status=(1 1 1 1 1 1 1)
checklistrender

userlevelcheck